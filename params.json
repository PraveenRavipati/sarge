{"google":"","body":"# Sarge 0.2.0\r\n\r\n*Simple object supervision (for when stuff goes wrong)*\r\n\r\nSarge creates *supervised* objects which *automatically* handle failures when they occur by performing retries, state resets, and failure escalation, allowing for easy and robust fault tolerance with little effort.\r\n\r\n## Setup\r\n\r\n[Download](https://github.com/jhalterman/sarge/downloads) the latest Sarge jar and add it to your classpath.\r\n\r\n## Usage\r\n\r\nSarge handles failures according to a `Plan` which takes an exception and directs Sarge to do something with it. Creating a `Plan` is straightforward:\r\n\r\n    Plan plan = Plans\r\n      .retryOn(TimeoutException.class, 5, Duration.mins(1))\r\n      .escalateOn(ConnectionClosedException.class)\r\n      .rethrowOn(IllegalArgumentException.class, IllegalStateException.class)\r\n      .make();\r\n      \r\nThis Plan retries any method invocations that fail with a TimeoutException, escalates any ConnectionClosedExceptions, and rethrows any IllegalArgumentExceptions and IllegalStateExceptions.      \r\n\r\n#### Supervision\r\n\r\nWith our `Plan` in hand, we can create a *supervised* object:\r\n\r\n\tSarge sarge = new Sarge();\r\n    MailService service = sarge.supervise(MailService.class, plan);\r\n\r\nSupervision is automatically applied according to the plan when any exception occurs while invoking a method against the object:\r\n    \r\n    // Failures are handled according to the plan\r\n    service.sendMail();\r\n    \r\n#### Hierarchical supervision\r\n\r\nSarge can create a parent/child supervision hierarchy where the `Supervisor`'s plan is applied to any failures that occur in the child:\r\n\r\n    class Parent implements Supervisor {\r\n      @Override\r\n      public Plan plan(){\r\n        return Plans\r\n          .retryOn(TimeoutException.class, 5, Duration.mins(1))\r\n          .escalateOn(ConnectionClosedException.class)\r\n          .make();\r\n      }\r\n    }\r\n     \r\n    Parent parent = new Parent();\r\n    Sarge sarge = new Sarge();\r\n     \r\n    // Create a Child that is supervised by the parent\r\n    Child child = sarge.supervise(Child.class, parent);\r\n    \r\nWe can link additional objects into the supervision hierarchy, which will handle any failures that are escalated:\r\n    \r\n\tsarge.link(uberParent, parent);\r\n\t\r\n#### More on plans\r\n\r\nAside from the `Plans` class, Plans can also be constructed directly by implementing the `Plan` interface and returning the desired `Directive` for handling each failure:\r\n\r\n    Plan plan = new Plan() {\r\n      public Directive apply(Throwable cause) {\r\n        if (cause instanceof TimeoutException)\r\n          return Directive.Retry(5, Duration.min(1));\r\n        if (cause instanceof ConnectionClosedException)\r\n          return Directive.Escalate;\r\n      }\r\n    };\r\n    \r\n#### Lifecycle hooks\r\n\r\nLifecycle hooks allow supervised objects to be notified prior to a supervision directive being carried out, allowing an object to reset its internal state if necessary:\r\n\r\n    class SupervisedService implements PreRetry {\r\n      @Override\r\n      public void preRetry(Throwable reason) {\r\n        if (reason instanceof ConnectionClosedException)\r\n          connect();\r\n      }\r\n    }\r\n\t\r\n## Thanks\r\n\r\nSarge was inpsired by [Erlang OTP's](http://www.erlang.org/doc/design_principles/des_princ.html) supervision trees and [Akka's supervision](http://akka.io) implementation. Thanks to the their contributors for the great work.\r\n\r\n## License\r\n\r\nCopyright 2012 Jonathan Halterman - Released under the [Apache 2.0 license](http://www.apache.org/licenses/LICENSE-2.0.html).","tagline":"Simple object supervision","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Sarge"}